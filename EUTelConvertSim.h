/* Converter between root file generated by dataflow and
 * timing/pixel structures used in the "CMSPixelDecoder"
 * from cmspxltb-analysis/external
 * (https://github.com/simonspa/cmspxltb-analysis)
 * 
 */

/*
 *   This source code is part of the Eutelescope package of Marlin.
 *   You are free to use this source files for your own development as
 *   long as it stays in a public research context. You are not
 *   allowed to use it for commercial purpose. You must put this
 *   header with author names in all development based on this file.
 *
 */
#ifndef SIMREADER
#define SIMREADER 1

//Include the Decoder:
// #include "CMSPixelDecoder/CMSPixelDecoder.h"

// System includes
#include <vector>
#include <map>
#include <string.h>
#include <cstdlib>
#include <iostream>
#include <stdint.h>

using namespace std;

#include "TTree.h"
#include "TFile.h"

//CMS pixel structure from EUTelescope
typedef struct {
    int roc;
    int col;
    int row;
    int raw;	 //raw adc value from roc
    double vcal; //Pulse height (after calibration)
} pixel;

//CMS timing structure from EUTelescope
typedef struct {
    int64_t timestamp;
    uint32_t trigger_number;	//Not used
    uint32_t token_number;	//Not used
    char triggers_stacked;	//Not used
    char trigger_phase;		//Not used
    char data_phase;		//Not used
    char status;		//Not used
} timing;



namespace CMSPixel
{
    
    struct encodedData{ //Structure of the root file from Dataflow
	Int_t roc;
	Int_t mycol;
	Int_t myrow;
	Int_t vcal;
	Double_t pulseHeight;
	Double_t phase;
	
	Long64_t TS;
	UInt_t trigger_number;
	UInt_t token_number;
	Char_t triggers_stacked;
	Char_t trigger_phase;
	Char_t data_phase;
	Char_t status;
	
    };

    
    class simReader{
    public:
	simReader(string filename, string treeName);
	simReader();
	void init(string filename, string treeName);
	~simReader();
	int getSimulatedEvent(std::vector<pixel> * decevt, std::vector<std::pair<uint8_t,uint8_t> > * readback, timing & evt_timing);
	int getSimulatedEvent(std::vector<pixel> * decevt, timing & evt_timing);
    private:
	int evtNumber;
	int TS;
	int treeSize;
	TFile * treeFile;
	TTree * t;
	
	encodedData d ;
    };
    
    

    
}

#endif